from Crypto.Cipher import AES
import binascii
#from argparse import ArgumentParser
import string

#def egcd(a, b):
#    if a == 0:
#        return (b, 0, 1)
#    else:
#        g, y, x = egcd(b % a, a)
#        return (g, x - (b // a) * y, y)
#
#def modinv(a, m):
#    g, x, y = egcd(a, m)
#    if g != 1:
#        raise Exception('modular inverse does not exist')
#    else:
#        return x % m

def extended_gcd(aa, bb):
    lastremainder, remainder = abs(aa), abs(bb)
    x, lastx, y, lasty = 0, 1, 1, 0
    while remainder:
        lastremainder, (quotient, remainder) = remainder, divmod(lastremainder, remainder)
        x, lastx = lastx - quotient*x, x
        y, lasty = lasty - quotient*y, y
    return lastremainder, lastx * (-1 if aa < 0 else 1), lasty * (-1 if bb < 0 else 1)

def modinv(a, m):
    g, x, y = extended_gcd(a, m)
    if g != 1:
        raise ValueError
    return x % m

def extEuclideanAlg(a, b) :
    """
    Computes a solution  to a x + b y = gcd(a,b), as well as gcd(a,b)
    """
    if b == 0 :
        return 1,0,a
    else :
        x, y, gcd = extEuclideanAlg(b, a % b)
        return y, x - y * (a // b),gcd

def modInvEuclid(a,m) :
    """
    Computes the modular multiplicative inverse of a modulo m,
    using the extended Euclidean algorithm
    """
    x,y,gcd = extEuclideanAlg(a,m)
    if gcd == 1 :
        return x % m
    else :
        return None

#convert string to hex
def toHex(s):
    lst = []
    for ch in s:
        hv = hex(ord(ch)).replace('0x', '')
        if len(hv) == 1:
            hv = '0'+hv
        lst.append(hv)
    return reduce(lambda x,y:x+y, lst)

primeNumber = 340282366920938463463374607431768211297
generator = 339661812359158752487805590648382723243
resultAlice = 197539712888466083939816614150725609070
resultBob = 67715685814376960569898647713350694734
x = 1

key = modInvEuclid(generator, primeNumber)

c_message = "\x10\x16\xF9\x40\xB7\x68\x51\x45\xBD\x37\x4E\xC8\x28\x3E\x3B\x93\x12\xF3\x6B\xCB\x0F\xCB\xF1\xF8\x43\xF1\xFE\x00\xAB\x39\xBC\x95\xDB\x5D\xE7\x4A\x89\x02\x41\xC7\xFE\x4C\x65\x8B\x0F\x8D\x61\xD2\x4F\x04\xD1\x01\x60\x29\x85\x06\x4E\x2C\x76\x8D\x9B\x6B\x72\xE7\xD6\x52\x0A\x4F\xF3\xA1\x65\x7D\x74\x8D\x19\x19\xEB\x04\xE6\xA4\x36\xA7\x5A\xDD\x5C\x5E\x53\x29\x6E\x0B\x38\x48\x50\xD1\x9B\xE3\xCD\x8E\x9E\xD0\x61\xF1\x19\x7A\x7D\x57\x99\xF5\x28\xAB\x71\x2D\xB2\x3D\x75\xF2\x2B\xBF\x1D\xFE\x2C\xBC\xBF\xB1\x91\xF9\xC9\xBB\xAE\x28\xEB\xFF\x06\xE9\xB3\x84\x40\x19\x56\xCD\x4F\x2F\xDC\x84\x16\x12\x9E\x18\xAF\x78\xCF\x88\x1D\xBE\x3E\x55\x49\xCC\x04\x2F\x79\x95\x77\xCF\x26\x3F\x39\xC0\x2C\xD9\x62\x4C\xF3\x29\x1D\xD5\x95\xCF\x45\xE5\x94\x85\x4F\xCD\x2E\xF2\x62\xCB\x50\x03\xBF\x66\x81\x88\x8A\x68\xE1\x64\x62\x51\xE1\xE3\x3C\x9A\x2A\xD8\x74\x58\xDC\x23\xAC\xDD\xE6\xEC\x85\xE6\xCC\x41\x26\x4A\x88\x32\x8B\xAD\x01\x89\xD3\x61\xA2\xD0\x06\x4E\xAF\x99\x2D\xCE\x27\x67\xDC\xF7\x05\x6B\x50\x42\x4B\xE3\xAC\xC0\x7F\x7C\x80\x8B\x7D\xEE\x83\x3D\x0A\x70\xA1\xAE\x40\x98\xBC\x83\xD6\x90\x4A\xD2\xD5\x58\x7F\x02\x98\x77\x52\x76\xE6\x7C\x5B\x54\xB7\x3A\xEA\x1E\x42\x61\xEE\x58\x8F\x98\x46\x43\x40\x28\x12\x38\xC9\xCD\x41\x83\x3F\x17\xA5\xA8\x51\xAB\xE9\x9C\xE0\x91\x8D\xBF\x0F\xC3\xA6\x64\xE9\x60\x25\x2A\x7D\x5C\xBD\xB8\x3E\x42\xDD\x95\x35\x57\x5D\xBF\x2A\x75\x40\xD5\x86\xC1\x33\x9E\x72\xE5\x84\x2E\x0B\x77\xD0\x5B\x78\x32\x57\x7D\x2E\xE3\xB4\x4B\x8C\xEA\xA9\xF8\xD1\x44\xB7\x2B\x05\xA3\x6F\xFE\x63\x5B\xDC\xAD\x14\x8A\xAC\x0B\xF0\xBE\x33\xF3\xEF\x53\x0E\x13\x66\xC4\xA8\xDF\x50\x39\xA0\x33\x43\x63\x60\xA5\xAF\xF1\xC8\xA5\xB7\x72\x54\x63\xE8\x4A\x34\x5A\x87\x9D\xAD\xA6\x06\x63\xF8\xA3\x7D\x0F\xF7\xFB\x40\xA3\x87\xD2\x7D\x4D\x6A\x35\x5B\x22\x81\x9E\xA3\x38\x3B\xAB\x9E\x76\x20\xAB\x5F\x0F\x38\xA5\xA4\x9E\x1B\xA7\xE3\xA4\x32\xD7\x5F\x6D\xA9\xAD\x17\xFF\xB1\x04\x7B\x98\xD9\x22\x5C\x94\x02\x68\xFC\x52\x26\x81\x15\x92\x26\x77\xE0\x22\x08\x20\xF2\x5B\xD7\x81\xE1\x3B\xD0\x0D\x6F\x03\xBD\x25\x86\x8F\x13\xDB\x5B\x52\xB1\x57\xFD\x4E\x39\xAC\xEE\xC2\x26\xAA\x3E\xB5\xD7\x62\xC3\xF0\x2E\xD3\x74\x28\xD5\x75\x3C\xF9\x62\x12\x61\x71\x6E\xB7\x9A\xC7\xEE\x72\xD9\xCF\x65\x7B\xE6\xDD\xB6\x32\x1A\x10\xC3\xDC\xB8\x62\x31\xC1\xEC\xD0\x81\xC1\x82\x2A\xE6\x48\x5D\xF1\x7F\xCA\xDD\x5B\x79\x2A\x63\x6B\xBC\x3E\x32\x0E\x67\x43\xF1\x26\x28\xA6\x6D\x6A\xAE\x34\x8C\x9C\x58\x2D\x29\xC8\xA0\x15\x28\x8B\x27\xE3\xB1\xCF\x9A\xDB\xD9\x4D\xD7\x94\xCA\xF9\xB8\x6F\x81\x4C\x5C\x29\xB3\x87\x38\x80\x09\x0F\x56\xB0\x24\xDE\xB0\x44\x69\x1C\x7C\x96\x3F\xBB\x9D\x46\xE7\x8F\x5E\xB0\xFD\xF8\xB0\xAD\x1E\xEB\x1B\x69\x69\xC3\x1E\xBC\xA3\x8B\xFA\x7D\x8E\xB8\x01\xB0\xC9\x53\x48\x94\xA9\xF5\x7A\xDE\x44\x67\x38\x23\x20\x30\x7C\x96\xF3\xF0\x69\x95\xEC\x94\xBD\x08\xDC\x06\xFE\xD0\x6B\x62\xF3\x11\x17\xC3\xF9\x51\x2D\x24\xF3\x1C\x0A\x13\xED\xB6\xD6\xC5\xA0\x8D\xF3\x6F\xB9\x0B\xDF\x2D\xEA\x68\x78\xD5\x78\x53\xBB\x68\xB9\xE2\xCC\x69\xCD\x30\x50\xF1\x5E\x3F\xE4\x02\xF4\x10\x0B\x4F\xB3\xE1\xAB\x71\xFA\xD3\xAB\x65\x14\xF6\xDE\xAA\xE4\x14\x30\x1E\x89\x94\xF0\xD3\x5E\xC8\x1D\x6A\x25\xEB\x08\xC0\xA8\xB7\x64\x53\x0B\x26\xF2\xB3\x78\x6A\xF4\x58\xF6\x65\x79\x8F\xEF\x4B\x66\x7D\xE8\x0C\xF7\x92\x07\x78\xA7\x97\xC8\xE6\x13\xDA\x3B\x2B\xE1\x16\xC1\xA0\x30\x5B\x84\x83\x27\x61\xBD\x3C\xC6\xD1\x6B\xC9\x6F\xEF\x82\xC1\x7D\x52\x9F\x3D\x89\x08\xE4\xF1\xF4\xE9\xB9\x92\xF5\xA5\x79\x52\x1B\x3B\xAC\x52\x71\x0F\xFF\xA8\xCC\x8E\x2F\x89\x71\x1E\xE1\x57\x06\x0A\x17\x3F\x8C\xDD\x39\x57\xA6\x8A\x94\xA9\xF9\x55\x0F\xE2\x04\x6D\x0C\x1F\x43\xA5\xBC\x97\x07\x9C\x57\xB0\x74\x12\x56\x02\x89\xC0\x92\xB7\x29\x2C\x56\xE7\xF5\x30\xB9\x4F\x87\x5B\x2C\x67\x42\xB6\x6F\x8E\xF6\xC4\x5A\x3C\xEB\x19\x3E\xD6\xA9\x60\x81\x92\x04\x15\x52\xD4\x42\x79\x03\x97\x5E\x21\x5C\x28\xAA\x29\x98\x35\x05\xC8\x5C\x56\x51\xA3\x99\xC0\x84\xC7\x4A\x53\x03\xE8\x0E\x82\xB3\x40\x29\x3B\x34\x9B\xA3\xF3\xD1\x74\x79\xBE\x7E\x36\xCB\x32\xF6\x9F\xD7\x21\xB5\x27\x12\x76\xC3\x07\xED\xD6\xEE\x41\x97\x1D\xA7\x6E\x99\x31\xA9\xF4\xF2\x7A\x45\x67\xF3\x99\x8F\xA8\xAB\x37\xBC\x37\xE4\xBE\x1E\x5E\xDA\x59\xB6\x32\x3D\x5C\xC8\xD2\x99\x72\xE8\x6B\x0E\x15\xB7\x42\x8E\xE5\xC8\x08\xD1\x49\x65\xC9\xF0\x6B\x3B\x2B\xA6\x1B\xFC\x31\x34\xB5\x42\x71\xB9\x81\x91\x5F\x75\x08\xC5\x74\x21\x59\xCA\x88\xB1\xEC\x67\xFD\x9F\xAD\xDA\x07\xA0\xE1\x7D\x44\xAC\x1B\xCD\x61\x4B\x24\xFD\x1C\x11\x40\x42\x7A\x06\xB1\x1C\x5C\x45\x94\x44\x03\x0A\x39\x46\x78\x86\xB2\x52\x72\x1F\xAE\xE0\xBE\xBE\x26\x00\xE6\x9F\x28\x0D\x76\x62\x5C\xC3\xAA\xC8\x92\x68\xA2\x10\xBA\x5F\x02\x31\x11\xAB\x3E\x83\xCB\x6D\x65\xE6\x93\xA5\x93\x1E\x0F\x3D\xE0\x5A\xCE\x00\x5F\xEF\x3D\x2C\xEA\xC5\xD1\x2D\x70\x6B\x09\x1D\x31\x59\x9F\xF6\x07\xF0\x6E\x89\x17\x02\xD2\xB9\x82\x1D\xD6\xD4\x7C\x3D\xDD\xA0\xBC\xBC\x54\xD4\x97\xCD\xC5\x55\xDE\x9C\x28\x8E\xF0\xFE\x67\xFE\x43\x83\xE4\x0E\xC1\x5D\x1B\x2C\xA4\xF9\x58\x8E\x76\x54\xB3\xFA\x9D\xD7\xAC\x9A\xC2\x52\xF6\x27\xDB\x13\xA4\x8F\x64\xA8\xC6\x94\xD0\x17\xDB\x50\xC7\x2B\x66\xA4\x7A\x20\x9C\xA8\x41\xC2\x58\x38\xCE\x2E\x82\xDD\x5A\x02\xAC\xEF\x18\xE3\x60\xCF\xAB\x9D\x3A\x69\x41\xB4\xC9\x2A\x6F\xB7\x3A\xDD\xE1\x73\x2C\x79\x8C\x7C\x57\x22\xAF\x51\x15\xB3\x7F\x26\xA8\x19\xB7\x74\x0F\x20\xD4\x0F\xCF\x26\x30\x48\x67\x36\xC1\xCB\xE4\x08\xC9\x52\xA9\xAD\x11\x35\x13\x82\xD6\x48\x23\xC9\x2E\xD8\x1F\xD1\x76\xD6\x95\xAD\x52\xDA\x34\x9C\xFB\x24\xE4\x09\x4D\xB0\x33\x66\x1B\x74\x12\x1D\xF8\x17\xA5\x1D\x69\x33\x01\xD9\xF7\x57\x7C\x83\x1F\xC1\x6D\x54\x59\x45\x43\xD8\x14\x4A\xE5\x78\xD9\xBF\xA5\xC2\xC7\x93\x0B\x81\x4A\xD8\xD4\x13\xDD\xBE\x4F\x10\x75\x81\x46\xD7\x79\xC6\x69\x6B\xF6\x20\x95\xEE\x59\xF9\xF3\xFD\xB0\x9C\xEE\x3B\x3C\x2B\x90\xDF\xA9\x33\x85\x4B\xDC\xB3\x80\x8C\xD3\xCD\xAB\x5D\xB1\xB2\x73\xA4\x01\x43\x80\x55\xBC\xB2\xE5\xB4\x5B\xA6\x93\x37\xF3\x1B\xCE\x66\xE5\x2F\x18\x11\xB3\xEA\x98\x4B\x98\xCB\xFF\x74\xDD\xD9\x5A\x9E\x0D\x11\xEC\xDE\x38\x35\xAA\x7D\xA8\x37\xA8\xEA\xCE\xD2\x5D\xBB\x54\x85\x2C\x42\xB2\xFB\x6F\x9F\xE1\x81\x00\x6F\x07\xF4\x30\x44\xE8\x9C\xDA\x5F\x0D\xC7\x7B\x37\x8B\x56\x20\xA0\x0A\x0F\x31\x57\xF4\xF4\x45\x75\x3E\x0B\x25\x05\x00\xF1\x7C\x43\x2F\x37\x74\x60\xCF\x13\x01\x53\xF9\x82\xB7\xE1\x43\x02\x58\xAC\xE2\x64\xDC\xE3\x39\xD5\x23\xFE\x43\x69\xF2\x01\xCC\xF7\xFA\xC0\x66\x53\x1D\xC2\x7E\x0B\x7E\x47\xBB\x98\x18\x43\xF5\xDC\xC3\x18\x21\x05\xE7\x1B\x48\x8E\xC3\x93\x06\x6A\x76\xE0\x7F\xD3\x7E\x6B\xB9\xC6\xE0"
key = hex(key)
key = key[-16:]
decrypter = AES.new(key, AES.MODE_ECB)
message = decrypter.decrypt(c_message)
print message
